// Generated by CoffeeScript 1.10.0
(function() {
  $(function() {
    var $body, $collection, $grid, $header, $itemTitle, $main, $pageTitle, $secondary, $single, $table, $window, browserNav, checkSize, closeDur, createSingle, doodle, dragAndDrop, holdOn, horzScroll, init, loadCollection, loadSingle, loadedSlug, lookAt, lookAway, makeResizable, openDur, pickUp, putDown, resizeGrid, resizeSects, saveCollection, shiftAndRotate, toggleFolder, transEnd, vertScroll;
    $window = $(window);
    $body = $('body');
    $main = $('main');
    $header = $('header');
    $itemTitle = $header.find('.title.item');
    $grid = $('.grid');
    $pageTitle = $header.find('.pageTitle span');
    $secondary = $header.find('.secondary');
    $table = $('#table');
    $single = $('#single');
    $collection = $('#collection');
    transEnd = 'transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd';
    loadedSlug = $single.attr('data-item');
    init = function() {
      var data;
      dragAndDrop();
      loadCollection();
      doodle();
      $body.on('mousewheel', '.horzScroll', function(event) {
        return horzScroll(this, event);
      });
      $body.scroll(function(event) {
        return vertScroll(this, event);
      });
      $body.on('click', 'header .close', function(e) {
        e.preventDefault();
        return putDown(true);
      });
      $body.on('mousemove', function(e) {
        return $(this).find('.shift').each(function() {
          return shiftAndRotate(this, e);
        });
      });
      $(window).on('popstate', function(e) {
        return browserNav(e);
      });
      $body.on('click', '.item.click', function() {
        var $item;
        $item = $(this);
        if ($item.is('.selected')) {

        } else if ($item.is('.collected') && $body.is('.looking') && !$body.is('.swapping')) {
          putDown();
          $body.addClass('swapping');
          return setTimeout(function() {
            return pickUp($item, true);
          }, 900);
        } else if (!$body.is('.looking') && !$body.is('.swapping')) {
          return pickUp($item, true);
        }
      });
      $body.on('mouseover', '.item.click', function() {
        return lookAt(this);
      });
      $body.on('mouseleave', '.item.click', function() {
        return lookAway(this);
      });
      $body.on('click', '#single.folder section', function(e) {
        return toggleFolder(this);
      });
      if ($body.is('.looking')) {
        if (!history.state) {
          data = {
            action: 'up',
            slug: slug
          };
          history.replaceState(data, document.title, window.location.href);
        }
        loadSingle(loadedSlug);
      }
      $grid.imagesLoaded(function() {
        resizeGrid();
        checkSize;
        resizeSects();
        resizeGrid();
        return vertScroll();
      });
      $('.shift').each(function() {
        return shiftAndRotate(this);
      });
      return $(window).resize(function() {
        if (checkSize('phone')) {
          $('.resizable').resizable('disable');
          $('.resizable').find('.text').each(function() {
            return $(this).attr('style', '');
          });
        } else {
          $('.resizable').resizable('enable');
        }
        return resizeSects();
      }).resize();
    };
    resizeGrid = function() {
      var gutter;
      gutter = $grid.find('.gutter').innerWidth();
      if (!checkSize('phone')) {
        $grid.isotope({
          layoutMode: 'masonryHorizontal',
          itemSelector: '.item',
          percentPosition: false,
          gutter: gutter,
          transitionDuration: 0,
          masonryHorizontal: {
            rowHeight: '.sizer',
            gutter: gutter,
            percentPosition: true,
            transitionDuration: 0
          },
          animationOptions: {
            duration: 0
          }
        });
        $grid.find('.item').each(function() {
          var $item, height;
          $item = $(this);
          if ($item.is('.large')) {
            height = $table.innerHeight() - gutter * 2;
          } else {
            height = $table.innerHeight() / 2 - gutter * 1.5;
          }
          $item.css({
            height: height
          });
          return $item.find('img').css({
            height: height
          });
        });
      }
      $grid.isotope();
      return $grid.addClass('loaded');
    };
    vertScroll = function(self, event) {
      var $section, paddingTop, sectionTop, vertScrollTop;
      vertScrollTop = $main.scrollTop();
      $section = $header.parents('section');
      if (!$section.length) {
        return;
      }
      sectionTop = $section.offset().top;
      if (sectionTop <= 0) {
        $header.addClass('fixed');
        paddingTop = $header.innerHeight();
      } else {
        $header.removeClass('fixed');
        paddingTop = 0;
      }
      return $section.css({
        paddingTop: paddingTop
      });
    };
    horzScroll = function(self, event) {
      var delta;
      if (checkSize('phone')) {
        return;
      }
      delta = event.deltaY;
      if (delta !== 0) {
        event.preventDefault();
        return self.scrollLeft -= delta;
      }
    };
    dragAndDrop = function() {
      var gutter;
      gutter = $grid.find('.gutter').innerWidth();
      $grid.find('.item').draggable({
        containment: 'body',
        helper: 'clone',
        snap: '#collection',
        snapMode: 'inner',
        snapTolerance: 0,
        appendTo: 'body',
        scroll: false,
        cursorAt: {
          left: 0,
          top: 0
        },
        start: function(event, ui) {
          var $helper;
          $helper = $(ui.helper);
          $helper.addClass('helper');
          return $grid.addClass('dragging');
        },
        drag: function(event, ui) {
          var $helper, collectionTop, itemTop;
          $helper = $(ui.helper);
          $helper.css('transform', '');
          itemTop = ui.offset.top;
          collectionTop = $collection.find('.items').offset().top;
          if (itemTop >= collectionTop - 1) {
            return $helper.addClass('over');
          } else {
            return $helper.removeClass('over');
          }
        },
        stop: function(event, ui) {
          var $helper;
          $helper = $(ui.helper);
          $helper.removeClass('helper');
          return $grid.removeClass('dragging');
        }
      });
      $collection.droppable({
        accept: '.item.droppable',
        drop: function(event, ui) {
          var $item;
          $(this).removeClass('over');
          $item = $(ui.draggable[0]).clone();
          return holdOn($item);
        },
        over: function(event, ui) {
          return $collection.addClass('over');
        },
        out: function(event, ui) {
          return $collection.removeClass('over');
        }
      });
      $table.droppable({
        accept: '.item',
        drop: function(event, ui) {
          var $helper;
          $helper = ui.helper;
          if ($helper.is('.deletable')) {
            return $(ui.draggable).remove();
          }
        },
        over: function(event, ui) {
          var $helper;
          $helper = ui.helper;
          $helper.addClass('deleting');
          return $('#collection .placeholder').addClass('hide');
        },
        out: function(event, ui) {
          var $helper;
          $helper = ui.helper;
          $helper.removeClass('deleting');
          return $('#collection .placeholder').removeClass('hide');
        }
      });
      return $collection.find('.items').sortable({
        items: '> .item',
        containment: 'body',
        helper: 'clone',
        snap: '#collection .items',
        snapMode: 'inner',
        snapTolerance: 0,
        scroll: false,
        placeholder: 'placeholder',
        forcePlaceholderSize: true,
        cursorAt: {
          left: 0,
          top: 0
        },
        start: function(event, ui) {
          var $helper;
          $helper = $(ui.helper);
          $helper.addClass('deletable');
          return $collection.addClass('sorting');
        },
        stop: function(event, ui) {
          $collection.removeClass('sorting');
          return saveCollection();
        }
      });
    };
    holdOn = function(item) {
      var $item, slug;
      $item = $(item);
      $item.removeClass('shift rotate droppable');
      $item.addClass('collected');
      $item.attr('style', '');
      $item.find('img').attr('style', '');
      slug = $item.data('slug');
      if ($collection.find('[data-slug="' + slug + '"]').length) {
        return;
      }
      $collection.removeClass('empty');
      $collection.find('.items').append($item);
      return saveCollection();
    };
    openDur = 800;
    closeDur = 500;
    pickUp = function(self, push) {
      var $collected, $item, index, slug, storySlug, title, type, url;
      $item = $(self);
      index = $item.attr('data-index');
      type = $item.attr('data-type');
      slug = $item.attr('data-slug');
      url = $item.attr('data-url');
      title = $item.attr('data-title');
      storySlug = $item.attr('data-story');
      $collected = $('#collection .item[data-index="' + index + '"]');
      $collected.addClass('selected');
      $body.addClass('looking');
      $single.addClass('open');
      $itemTitle.addClass('ready').find('a').html(title).attr('href', url);
      setTimeout(function() {
        $itemTitle.addClass('show');
        return $single.addClass('show');
      }, 100);
      return setTimeout(function() {
        $body.removeClass('swapping');
        return $.ajax({
          url: url,
          dataType: 'html',
          error: function(jqXHR, status, err) {
            console.log(jqXHR);
            console.log(status);
            return console.error(err);
          },
          success: function(response, status, jqXHR) {
            var data, showCheck;
            if (push) {
              data = {
                action: 'up',
                slug: slug
              };
              history.pushState(data, document.title, url);
            }
            $single.addClass(type).attr('data-item', slug);
            if (!$single.attr('data-slug')) {
              showCheck = setInterval(function() {
                if ($single.is('.show')) {
                  createSingle(response);
                  return clearInterval(showCheck);
                }
              }, 10);
              return $single.removeClass('loaded');
            } else {
              return createSingle(response);
            }
          }
        });
      }, openDur);
    };
    createSingle = function(html) {
      var $data, slug, title, type, url;
      $data = $($(html)[0]);
      title = $data.data('title');
      slug = $data.data('item');
      type = $data.data('type');
      url = $data.data('url');
      $single.data('title', title).data('slug', slug).data('type', type).data('url', url);
      $single.off(transEnd);
      $single.html(html);
      return setTimeout(function() {
        return loadSingle(slug);
      }, 100);
    };
    loadSingle = function(slug) {
      makeResizable();
      if (slug !== $single.attr('data-item')) {
        return;
      }
      $single.addClass('loaded');
      $collection.find('.item[data-slug="' + slug + '"]').addClass('selected');
      return setTimeout(function() {
        return imagesLoaded($single).on('progress', function(inst, image) {
          var $item;
          $item = $(image.img).parents('.item');
          return $item.addClass('loaded');
        });
      }, 500);
    };
    putDown = function(push) {
      var $collected, data, itemSlug, scrollLeft, url;
      itemSlug = $single.attr('data-item');
      url = window.location.href.replace(itemSlug, '');
      if (push) {
        data = {
          action: 'down',
          slug: itemSlug
        };
        history.pushState(data, document.title, url);
      }
      $collected = $('#collection .item.selected').removeClass('selected');
      scrollLeft = $table.scrollLeft();
      $single.on(transEnd, function() {
        $single.off(transEnd);
        $single.removeClass('');
        $single.attr('class', '');
        $single.html('');
        $itemTitle.removeClass('ready');
        return $body.removeClass('looking');
      });
      $single.removeClass('show');
      return $itemTitle.removeClass('show');
    };
    resizeSects = function() {
      var $leftSect, $rightSect, fontFactor, leftWidth, rightWidth, windowWidth;
      $leftSect = $single.find('section#left');
      $rightSect = $single.find('section#right');
      windowWidth = $window.innerWidth();
      leftWidth = $leftSect.innerWidth();
      rightWidth = windowWidth - leftWidth;
      $rightSect.css({
        width: rightWidth
      });
      fontFactor = windowWidth * 2 * 19;
      return $single.find('section').each(function(i, sect) {
        var $inner, $sect, fontSize, sectWidth;
        $sect = $(sect);
        $inner = $sect.find('.inner');
        sectWidth = $sect.innerWidth();
        fontSize = sectWidth / windowWidth * 2 * 19;
        if (fontSize <= 25 && fontSize >= 9) {
          return $sect.find('.text').css({
            fontSize: fontSize + 'px'
          });
        }
      });
    };
    makeResizable = function() {
      var $left;
      $left = $single.find('section#left');
      if ($single.is('.folder')) {
        $single.addClass('left');
      }
      return $left.resizable({
        handles: 'e',
        create: function(e, ui) {
          return $(e.target).addClass('resizable');
        },
        resize: function(e, ui) {
          return resizeSects();
        }
      });
    };
    toggleFolder = function(section) {
      if (!checkSize('phone')) {
        return;
      }
      if ($(section).is('#right')) {
        return $single.addClass('right').removeClass('left');
      } else {
        return $single.addClass('left').removeClass('right');
      }
    };
    lookAt = function(self) {
      var $collected, $item, slug;
      if ($grid.is('.dragging') || $collection.is('.sorting')) {
        return;
      }
      slug = $(self).data('slug');
      $item = $('.grid .item[data-slug="' + slug + '"]');
      $collected = $('#collection .item[data-slug="' + slug + '"]');
      $collected.addClass('looking');
      return $item.addClass('looking');
    };
    lookAway = function(self) {
      var $collected, $item, slug;
      slug = $(self).data('slug');
      $item = $('.grid .item[data-slug="' + slug + '"]');
      $collected = $('#collection .item[data-slug="' + slug + '"]');
      $collected.removeClass('looking');
      return $item.removeClass('looking');
    };
    shiftAndRotate = function(item, e) {
      var $item, index, rotate, shift, shiftX, shiftY, winHeight, winWidth, x, y;
      $item = $(item);
      if ($item.is('.helper')) {
        return;
      }
      shift = parseInt($item.attr('data-shift'));
      index = parseInt($item.attr('data-index'));
      rotate = parseInt($item.attr('data-rotate'));
      if (shift === 0 || !shift) {
        shift = 0.5;
      }
      winWidth = $(window).innerWidth();
      winHeight = $(window).innerHeight();
      if (e) {
        x = e.clientX;
        y = e.clientY;
      } else {
        x = 1;
        y = 1;
      }
      shiftX = -x / winWidth * shift;
      shiftY = -y / winHeight * shift;
      if (!rotate) {
        rotate = 0;
      }
      return $item.css({
        x: shiftX,
        y: shiftY,
        rotate: rotate + 'deg'
      });
    };
    browserNav = function(e) {
      var $item, action, slug, state;
      state = history.state;
      if (!state) {
        return;
      }
      action = state.action;
      slug = state.slug;
      if (action === 'up') {
        $item = $grid.find('.item[data-slug="' + slug + '"]');
        return pickUp($item, false);
      } else if (action === 'down') {
        return putDown(false);
      }
    };
    loadCollection = function() {
      var collection, storySlug;
      storySlug = $table.data('story');
      collection = localStorage.getItem(storySlug);
      if (!collection) {
        return;
      }
      collection = JSON.parse(collection);
      return $.each(collection, function(i, slug) {
        var $item;
        $item = $table.find('[data-slug="' + slug + '"]');
        if ($item) {
          return holdOn($item.clone());
        }
      });
    };
    saveCollection = function() {
      var newCollection, storySlug;
      storySlug = $table.data('story');
      newCollection = [];
      $collection.find('.item').each(function(i, item) {
        var itemSlug;
        itemSlug = $(item).data('slug');
        return newCollection.push(itemSlug);
      });
      newCollection = JSON.stringify(newCollection);
      return localStorage.setItem(storySlug, newCollection);
    };
    doodle = function() {
      var allMarks, i, j;
      return;
      allMarks = [];
      for (i = j = 0; j < 9; i = ++j) {
        allMarks.push(i + 1);
      }
      return $('.margin').each(function() {
        var $margin, count, height, k, len, marks, newImg, results, width;
        $margin = $(this);
        marks = allMarks.slice(0, 2);
        marks.sort(function() {
          return 0.5 - Math.random();
        });
        width = $margin.innerWidth();
        height = $margin.innerHeight();
        count = 0;
        results = [];
        for (k = 0, len = marks.length; k < len; k++) {
          i = marks[k];
          newImg = new Image;
          newImg.src = '/assets/images/marks/' + i + '.png';
          results.push($(newImg).on('load', function(e) {
            var heightPart, img, left, startTop, top;
            img = e.target;
            left = Math.random() * width;
            heightPart = height / marks.length;
            startTop = heightPart * count;
            top = startTop + (Math.random() * heightPart);
            $(img).css({
              left: left,
              top: top
            });
            $margin.append(img);
            return count++;
          }));
        }
        return results;
      });
    };
    checkSize = function(check) {
      var size;
      size = $body.css('content').replace(/\"/g, '');
      if (!check) {
        return size;
      } else if (size === check) {
        return true;
      } else {
        return false;
      }
    };
    return init();
  });

}).call(this);
